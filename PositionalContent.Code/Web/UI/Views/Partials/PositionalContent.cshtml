@using Hifi.PositionalContent;

@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<PositionalContentModel>
@{
    var breakpoints = Model.BreakpointsAsList().ToList();
    var cssRoot = "positional-content";
    var cssSpecific = Model.CssNamespace;

    SmidgeHelper.RequiresCss("~/App_Plugins/PositionalContent/positionalcontent-frontend.css");
    
    string DimensionContentSetting(Dictionary<string, PositionalContentItemDimension> dimensions, string cssRoot, string cssSpecific)
    {
        var output = new System.Text.StringBuilder();
        foreach (var d in dimensions)
        {
            if ((d.Value.OverrideContent && d.Value.HasContent) || (d.Value.OverrideSettings && d.Value.HasSettings) || d.Value.Hide)
            {
                output.AppendFormat(" {0}-dimensions-{1}__content-hidden--{2}", cssRoot, cssSpecific, d.Key);
            }
        }
        return output.ToString();
    }
}

@* NOTE: This RenderJsHere code should be put on your main template page where the rest of your script tags are placed *@
@SmidgeHelper.CssHereAsync()

<style lang="css" rel="stylesheet">
    @Html.Partial("PositionalContentCss")
</style>

<figure class="@cssRoot">
    <picture class="@(cssRoot)__image">
        @foreach (var b in breakpoints)
        {
            var index = breakpoints.IndexOf(b);
            if (index == 0)
            {
                <source media="(min-width: @(b.BreakpointLower)px)" srcset="@b.ImageUrl(Model, Umbraco)">
            }
            else if (index == breakpoints.Count - 1)
            {
                <source media="(max-width: @(b.BreakpointUpper)px)" srcset="@b.ImageUrl(Model, Umbraco)">
            }
            else
            {
                <source media="(max-width: @(b.BreakpointUpper)px) and (min-width: @(b.BreakpointLower)px)" srcset="@b.ImageUrl(Model, Umbraco)">
            }
        }
        <img class="@(cssRoot)__image-inner" src="@breakpoints.FirstOrDefault().ImageUrl(Model, Umbraco)" alt="">
    </picture>
    <figcaption class="@(cssRoot)__content">
        @foreach (var i in Model.Items)
        {
            @Html.Raw(string.Format("<div class='{0}-dimensions'>", cssRoot))

            foreach (var d in i.Dimensions)
            {
                @Html.Raw(string.Format("<div class='{0}-dimensions__wrapper {0}-dimensions-{1}__wrapper--{2}' style='{3}'>", cssRoot, cssSpecific, d.Key, d.Value.PositionalStylesAsString()))
            }

            var dimensionContentSetting = DimensionContentSetting(i.Dimensions, cssRoot, cssSpecific);
            
            
            <div class="@(cssRoot)-dimensions__content @dimensionContentSetting">
                <vc:positional-content-render-item item="i" data="Model" />
            </div>

            foreach (var d in i.Dimensions)
            {
                if (!d.Value.Hide && ((d.Value.HasContent && d.Value.OverrideContent) || (d.Value.HasSettings && d.Value.OverrideSettings)))
                {
                    @Html.Raw(string.Format("<div class='{0}-dimensions__content-override {0}-dimensions-{1}__content-override--{2}'>", cssRoot, cssSpecific, d.Key))
                    <text>
                        <vc:positional-content-render-dimension item="i" data="d" dimension="d.Value" />
                    </text>
                    @Html.Raw("</div>")
                }
            }

            foreach (var d2 in i.Dimensions)
            {
                @Html.Raw("</div>")
            }
            @Html.Raw("</div>")

        }
    </figcaption>
</figure>

